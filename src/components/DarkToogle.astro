<button
id="theme-btn"
class="theme-toggle"
title="Toggles light & dark"
aria-label="auto"
aria-live="polite"
>
<svg aria-hidden="true" width="24" height="24" viewBox="0 0 24 24">
<!-- https://feathericons.com/?query=sun -->
<mask id="moon">
  <rect x="0" y="0" width="100%" height="100%" fill="white"></rect>
  <circle cx="40" cy="8" r="11" fill="black"></circle>
</mask>
<circle id="sun" cx="12" cy="12" r="11" mask="url(#moon)"></circle>
<g id="sun-beams">
  <line x1="12" y1="1" x2="12" y2="3"></line>
  <line x1="12" y1="21" x2="12" y2="23"></line>
  <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
  <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
  <line x1="1" y1="12" x2="3" y2="12"></line>
  <line x1="21" y1="12" x2="23" y2="12"></line>
  <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
  <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
</g>
</svg>
</button>

<style is:global>
  .theme-toggle {
    background: none;
    --nav-icon: var(--text-2);
    --nav-icon-hover: var(--brand);
    border-radius: var(--radius-2);
    min-width: 24px;
    min-height: 24px;
    padding: 6px;
  }

  #moon,
  #sun {
    fill: var(--nav-icon);
    stroke: none;

    @nest :hover > svg > & {
      fill: var(--nav-icon-hover);
    }
  }

  #sun {
    transition: transform 0.5s var(--ease-4);
    transform-origin: center center;
  }

  #sun-beams {
    --_opacity-dur: 0.15s;
    stroke: var(--nav-icon);
    stroke-width: 2px;
    transform-origin: center center;
    transition:
      transform 0.5s var(--ease-elastic-4),
      opacity var(--_opacity-dur) var(--ease-3);

    @nest :hover > svg > & {
      stroke: var(--nav-icon-hover);
    }
  }

  #moon > circle {
    transition: transform 0.5s var(--ease-out-3);
  }

  [data-theme="light"] {
    & #sun {
      transform: scale(0.5);
    }

    & #sun-beams {
      transform: rotateZ(0.25turn);
      --_opacity-dur: 0.5s;
    }
  }

  [data-theme="dark"] {
    & #moon > circle {
      transform: translateX(-20px);
    }

    & #sun-beams {
      opacity: 0;
    }
  }
</style>

<script is:inline>
  const primaryColorScheme = ""; // "light" | "dark"
  
  // Get theme data from local storage
  const currentTheme = localStorage.getItem("theme");
  
  function getPreferTheme() {
    // return theme value in local storage if it is set
    if (currentTheme) return currentTheme;
  
    // return primary color scheme if it is set
    if (primaryColorScheme) return primaryColorScheme;
  
    // return user device's prefer color scheme
    return window.matchMedia("(prefers-color-scheme: dark)").matches
      ? "dark"
      : "light";
  }
  
  let themeValue = getPreferTheme();
  
  function setPreference() {
    localStorage.setItem("theme", themeValue);
    reflectPreference();
  }
  
  function reflectPreference() {
    document.firstElementChild.setAttribute("data-theme", themeValue);
  
    document.querySelector("#theme-btn")?.setAttribute("aria-label", themeValue);
  
    // Get a reference to the body element
    const body = document.body;
  
    // Check if the body element exists before using getComputedStyle
    if (body) {
      // Get the computed styles for the body element
      const computedStyles = window.getComputedStyle(body);
  
      // Get the background color property
      const bgColor = computedStyles.backgroundColor;
  
      // Set the background color in <meta theme-color ... />
      document
        .querySelector("meta[name='theme-color']")
        ?.setAttribute("content", bgColor);
    }
  }
  
  // set early so no page flashes / CSS is made aware
  reflectPreference();
  
  window.onload = () => {
    function setThemeFeature() {
      // set on load so screen readers can get the latest value on the button
      reflectPreference();
  
      // now this script can find and listen for clicks on the control
      document.querySelector("#theme-btn")?.addEventListener("click", () => {
        themeValue = themeValue === "light" ? "dark" : "light";
        setPreference();
      });
    }
  
    setThemeFeature();
  
    // Runs on view transitions navigation
    document.addEventListener("astro:after-swap", setThemeFeature);
  };
  
  // sync with system changes
  window
    .matchMedia("(prefers-color-scheme: dark)")
    .addEventListener("change", ({ matches: isDark }) => {
      themeValue = isDark ? "dark" : "light";
      setPreference();
    });
  </script>